{"version":3,"sources":["lib/algUtil.js","lib/twophase.js","Home.tsx","Trainer.tsx","App.tsx","index.tsx"],"names":["algUtil","faceList","rotateX","rotateXPrime","rotateX2","rotateY","rotateYPrime","rotateY2","rotateZ","rotateZPrime","rotateZ2","rotate","rotateList","resultFaceList","i","notationToIndex","notation","index","makeRotationLessAlg","alg","currentFaceList","scrambleList","split","resultScrambleList","length","currentNotation","resultNotation","push","join","module","exports","twophase","moveName","moveObject","restrictedMove","Cnk","twistTable","flipTable","eSliceTable","cPTable","UDEPTable","eSliceTable2","twistESlicePrun","flipESlicePrun","cPESlicePrun","UDEPESlicePrun","initialized","getTwist","obj","ret","co","getFlip","eo","getESlice","s","ep","getCP","tmp","flag","cp","fact","bitCount","getUDEP","getESlice2","cur","setTwist","idx","tw","setFlip","fl","setESlice","setCP","arr","splice","setUDEP","setESlice2","getCornerParity","p","getEdgeParity","initTwistTable","create2DArray","j","obj_0","ArrayCube","apply","initFlipTable","initESliceTable","initCPTable","initUDEPTable","initESliceTable2","initTwistESlicePrun","children1","children2","done","depth","Array","fill","initFlipESlicePrun","initCPESlicePrun","initUDEPESlicePrun","this","move","map","IndexCubePhase1","IndexCubePhase2","twist","flip","eslice","newTwist","newFlip","newESlice","newMove","slice","udep","eslice2","newCp","newUDEP","newESlice2","_move","indexOf","search","root","max","stack","_stack","root1","root2","_root","toIndexPhase1","Stack","nextMove","nextFace","curFace","size","pop","copy","toIndexPhase2","_depth","_cur","_nextMove","_nextFace","_curFace","concat","Math","getRandomState","seed","random","Random","randomInt","setEP","cancelMoves","moves","l","axisList","suffixList","newFaceList","newAxisList","newSuffixList","cancelled","swapElement","bits","n","l1","l2","x","y","z","w","floor","Date","now","t","abs","_random","heap","item","unshift","shift","initialize","U","F","R","D","B","L","initUtil","solve","scramble","_solution","solution","forEach","val","getScramble","scr","reverse","console","log","Home","props","classes","makeStyles","createStyles","container","margin","padding","maxWidth","box","marginBottom","error","color","useStyles","useState","algList","setAlgList","isError","setIsError","useEffect","twoPhase","location","state","AppBar","position","Toolbar","Typography","Box","className","display","flexDirection","justifyContent","Button","variant","onClick","setTimeout","history","pathname","TextField","id","multiline","rows","defaultValue","onChange","event","target","value","Trainer","scrambleBlock","backgroundColor","imageBlock","timerBlock","timeListBlock","intervalRef","useRef","time","setTime","isTimerRunning","setIsTimerRunning","timeList","setTimeList","setScramble","algListInState","startGame","document","onkeydown","code","operateGame","endGame","startTimer","list","algIndex","stopTimer","moment","format","current","setInterval","c","clearInterval","src","replace","alt","alignItems","flexGrow","onTouchStart","App","exact","path","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c30f663c.chunk.js","sourcesContent":["const algUtil = (function() {\n    let faceList = [\"U\", \"R\", \"F\", \"D\", \"L\", \"B\"]\n    const rotateX = [2, 1, 3, 5, 4, 0]\n    const rotateXPrime = [5, 1, 0, 2, 4, 3]\n    const rotateX2 = [3, 1, 5, 0, 4, 2]\n    const rotateY = [0, 5, 1, 3, 2, 4]\n    const rotateYPrime = [0, 2, 4, 3, 5, 1]\n    const rotateY2 = [0, 4, 5, 3, 1, 2]\n    const rotateZ = [4, 0, 2, 1, 3, 5]\n    const rotateZPrime = [1, 3, 2, 4, 0, 5]\n    const rotateZ2 = [3, 4, 2, 0, 1, 5]\n\n    const rotate = (faceList, rotateList) => {\n        const resultFaceList = [0, 1, 2, 3, 4, 5]\n        for (let i = 0; i < 6; i++) {\n            resultFaceList[i] = faceList[rotateList[i]]\n        }\n        return resultFaceList\n    }\n\n    const notationToIndex = (notation) => {\n        let index\n        switch (notation) {\n            case \"U\": {\n                index = 0\n                break\n            }\n            case \"R\": {\n                index = 1\n                break\n            }\n            case \"F\": {\n                index = 2\n                break\n            }\n            case \"D\": {\n                index = 3\n                break\n            }\n            case \"L\": {\n                index = 4\n                break\n            }\n            case \"B\": {\n                index = 5\n                break\n            }\n            default: {\n                index = 0\n                break\n            }\n        }\n        return index\n    }\n\n    const makeRotationLessAlg = (alg) => {\n        let currentFaceList = [0, 1, 2, 3, 4, 5]\n        const scrambleList = alg.split(\" \")\n        const resultScrambleList = []\n        for (let i = 0; i < scrambleList.length; i++) {\n            if (scrambleList[i] === \"x\") {\n                currentFaceList = rotate(currentFaceList, rotateX)\n            } else if (scrambleList[i] === \"x'\") {\n                currentFaceList = rotate(currentFaceList, rotateXPrime)\n            } else if (scrambleList[i] === \"x2\") {\n                currentFaceList = rotate(currentFaceList, rotateX2)\n            } else if (scrambleList[i] === \"y\") {\n                currentFaceList = rotate(currentFaceList, rotateY)\n            } else if (scrambleList[i] === \"y'\") {\n                currentFaceList = rotate(currentFaceList, rotateYPrime)\n            } else if (scrambleList[i] === \"y2\") {\n                currentFaceList = rotate(currentFaceList, rotateY2)\n            } else if (scrambleList[i] === \"z\") {\n                currentFaceList = rotate(currentFaceList, rotateZ)\n            } else if (scrambleList[i] === \"z'\") {\n                currentFaceList = rotate(currentFaceList, rotateZPrime)\n            } else if (scrambleList[i] === \"z2\") {\n                currentFaceList = rotate(currentFaceList, rotateZ2)\n            } else {\n                const currentNotation = scrambleList[i].split(\"\")\n                let resultNotation = \"\"\n                if (currentNotation.length === 1) {\n                    resultNotation = faceList[currentFaceList[notationToIndex(currentNotation[0])]]\n                } else if (currentNotation.length === 2) {\n                    resultNotation = faceList[currentFaceList[notationToIndex(currentNotation[0])]] + currentNotation[1]\n                }\n                resultScrambleList.push(resultNotation)\n            }\n        }\n        return resultScrambleList.join(\" \")\n    }\n\n    return {\n        makeRotationLessAlg: makeRotationLessAlg\n    }\n})();\n\nmodule.exports = algUtil","const twophase = (() => {\n\nconst U = 0;\nconst F = 1;\nconst R = 2;\nconst D = 3;\nconst B = 4;\nconst L = 5;\n\nlet moveName;\nlet moveObject;\nlet restrictedMove;\nlet Cnk;\n\nlet twistTable;\nlet flipTable;\nlet eSliceTable;\nlet cPTable;\nlet UDEPTable;\nlet eSliceTable2;\n\nlet twistESlicePrun;\nlet flipESlicePrun;\nlet cPESlicePrun;\nlet UDEPESlicePrun;\n\nlet initialized = false;\n\nconst getTwist = (obj) => {\n  let ret = 0;\n  for (let i = 0; i < 7; i++) {\n    ret *= 3;\n    ret += obj.co[i]\n  }\n  return ret;\n}\n\nconst getFlip = (obj) => {\n  let ret = 0;\n  for (let i = 0; i < 11; i++) {\n    ret *= 2;\n    ret += obj.eo[i]\n  }\n  return ret;\n}\n\nconst getESlice = (obj) => {\n  let ret = 0\n  let s = 4;\n  for (let i = 0; i < 12; i++) {\n    if (obj.ep[i] > 7) {\n      ret += Cnk[11 - i][s--];\n    }\n  }\n  return ret;\n}\n\nconst getCP = (obj) => {\n  let flag = 255;\n  let ret = 0;\n  let tmp;\n  for (let i = 0; i < 8; i++) {\n    tmp = 255 >> 8 - obj.cp[i];\n    ret += fact(7 - i) * bitCount(flag & tmp);\n    flag ^= 1 << obj.cp[i];\n  }\n  return ret;\n}\n\nconst getUDEP = (obj) => {\n  let flag = 255;\n  let ret = 0;\n  let tmp;\n  for (let i = 0; i < 8; i++) {\n    tmp = 255 >> 8 - obj.ep[i];\n    ret += fact(7 - i) * bitCount(flag & tmp);\n    flag ^= 1 << obj.ep[i];\n  }\n  return ret;\n}\n\nconst getESlice2 = (obj) => {\n  let ret = 0\n  let flag = 15;\n  let tmp;\n  let cur;\n  for (let i = 0; i < 4; i++) {\n    cur = obj.ep[i + 8] - 8;\n\n    tmp = 15 >> 4 - cur;\n    ret += fact(3 - i) * bitCount(flag & tmp);\n    flag ^= 1 << cur;\n  }\n  return ret;\n}\n\nconst setTwist = (obj, idx) => {\n  let tw = 0\n  for (let i = 0; i < 7; i++) {\n    obj.co[i] = idx / (3 ** (6 - i)) | 0;\n    tw += obj.co[i];\n    idx = idx % (3 ** (6 - i));\n  }\n  obj.co[7] = (15 - tw) % 3;\n}\n\nconst setFlip = (obj, idx) => {\n  let fl = 0;\n  for (let i = 0; i < 11; i++) {\n    obj.eo[10 - i] = idx & 1;\n    fl += obj.eo[10 - i];\n    idx = idx >>> 1;\n  }\n  obj.eo[11] = (12 - fl) % 2\n}\n\nconst setESlice = (obj, idx) => {\n  let s = 4;\n  for (let i = 0; i < 12; i++) {\n    if (idx >= Cnk[11 - i][s]) {\n      obj.ep[i] = s + 7;\n      idx -= Cnk[11 - i][s--];\n    } else {\n      obj.ep[i] = i - 4 + s;\n    }\n  }\n}\n\nconst setCP = (obj, idx) => {\n  let arr = [0, 1, 2, 3, 4, 5, 6, 7];\n  let tmp;\n  for (let i = 0; i < 8; i++) {\n    tmp = 1 << idx / fact(7 - i) | 0;\n    obj.cp[i] = arr.splice(bitCount(tmp - 1), 1)[0];\n    idx = idx % fact(7 - i);\n  }\n}\n\nconst setUDEP = (obj, idx) => {\n  let arr = [0, 1, 2, 3, 4, 5, 6, 7];\n  let tmp;\n  for (let i = 0; i < 8; i++) {\n    tmp = 1 << idx / fact(7 - i) | 0;\n    obj.ep[i] = arr.splice(bitCount(tmp - 1), 1)[0];\n    idx = idx % fact(7 - i);\n  }\n}\n\nconst setESlice2 = (obj, idx) => {\n  let arr = [8, 9, 10, 11];\n  let tmp;\n  for (let i = 0; i < 4; i++) {\n    tmp = 1 << idx / fact(3 - i) | 0;\n    obj.ep[i + 8] = arr.splice(bitCount(tmp - 1), 1)[0];\n    idx = idx % fact(3 - i);\n  }\n}\n\nconst setEP = (obj, idx) => {\n  let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  let tmp;\n  for (let i = 0; i < 12; i++) {\n    tmp = 1 << idx / fact(11 - i) | 0;\n    obj.ep[i] = arr.splice(bitCount(tmp - 1), 1)[0];\n    idx = idx % fact(11 - i);\n  }\n}\n\nconst getCornerParity = (idx) => {\n  let tmp;\n  let p = 0;\n  for (let i = 0; i < 8; i++) {\n    tmp = 1 << idx / fact(7 - i) | 0;\n    p += bitCount(tmp - 1);\n    idx = idx % fact(7 - i);\n  }\n  return p & 1;\n}\n\nconst getEdgeParity = (idx) => {\n  let tmp;\n  let p = 0;\n  for (let i = 0; i < 12; i++) {\n    tmp = 1 << idx / fact(11 - i) | 0;\n    p += bitCount(tmp - 1);\n    idx = idx % fact(11 - i);\n  }\n  return p & 1;\n}\n\nconst initTable = () => {\n  initTwistTable();\n  initFlipTable();\n  initESliceTable();\n  initCPTable();\n  initUDEPTable();\n  initESliceTable2();\n}\n\nconst initTwistTable = () => {\n  twistTable = create2DArray(2187, 18);\n  let obj_0 = new ArrayCube()\n  let i, j;\n  for (i = 0; i < 2187; i++) {\n    setTwist(obj_0, i);\n    for (j = 0; j < 18; j++) {\n      twistTable[i][j] = getTwist(obj_0.apply(moveObject[j]));\n    }\n  }\n}\n\nconst initFlipTable = () => {\n  flipTable = create2DArray(2048, 18);\n  let obj_0 = new ArrayCube()\n  let i, j;\n  for (i = 0; i < 2048; i++) {\n    setFlip(obj_0, i);\n    for (j = 0; j < 18; j++) {\n      flipTable[i][j] = getFlip(obj_0.apply(moveObject[j]));\n    }\n  }\n}\n\nconst initESliceTable = () => {\n  eSliceTable = create2DArray(495, 18);\n  let obj_0 = new ArrayCube()\n  let i, j;\n  for (i = 0; i < 495; i++) {\n    setESlice(obj_0, i);\n    for (j = 0; j < 18; j++) {\n      eSliceTable[i][j] = getESlice(obj_0.apply(moveObject[j]));\n    }\n  }\n}\n\nconst initCPTable = () => {\n  cPTable = create2DArray(40320, 10);\n  let obj_0 = new ArrayCube()\n  let i, j;\n  for (i = 0; i < 40320; i++) {\n    setCP(obj_0, i);\n    for (j = 0; j < 10; j++) {\n      cPTable[i][j] = getCP(obj_0.apply(moveObject[restrictedMove[j]]));\n    }\n  }\n}\n\nconst initUDEPTable = () => {\n  UDEPTable = create2DArray(40320, 10);\n  let obj_0 = new ArrayCube()\n  let i, j;\n  for (i = 0; i < 40320; i++) {\n    setUDEP(obj_0, i);\n    for (j = 0; j < 10; j++) {\n      UDEPTable[i][j] = getUDEP(obj_0.apply(moveObject[restrictedMove[j]]));\n    }\n  }\n}\n\nconst initESliceTable2 = () => {\n  eSliceTable2 = create2DArray(24, 10);\n  let obj_0 = new ArrayCube()\n  let i, j;\n  for (i = 0; i < 24; i++) {\n    setESlice2(obj_0, i);\n    for (j = 0; j < 10; j++) {\n      eSliceTable2[i][j] = getESlice2(obj_0.apply(moveObject[restrictedMove[j]]));\n    }\n  }\n}\n\nconst initPrun = () => {\n  initTwistESlicePrun();\n  initFlipESlicePrun();\n  initCPESlicePrun();\n  initUDEPESlicePrun();\n}\n\nconst initTwistESlicePrun = () => {\n  twistESlicePrun = Array(1082565);\n  twistESlicePrun.fill(15);\n\n  let children1, children2, done, depth, i, j;\n\n  twistESlicePrun[0] = 0;\n  done = 1;\n  depth = 0;\n  while (done < 1082565) {\n    for (i = 0; i < 1082565; i++) {\n      if (twistESlicePrun[i] !== depth) {\n        continue;\n      }\n      \n      children1 = twistTable[i / 495 | 0];\n      children2 = eSliceTable[i % 495];\n      for (j = 0; j < 18; j++) {\n        if (twistESlicePrun[children1[j] * 495 + children2[j]] === 15) {\n          twistESlicePrun[children1[j] * 495 + children2[j]] = depth + 1;\n          done++\n        }\n      }\n    }\n    depth++;\n  }\n}\n\nconst initFlipESlicePrun = () => {\n  flipESlicePrun = Array(1013760);\n  flipESlicePrun.fill(15);\n\n  let children1, children2, done, depth, i, j;\n\n  flipESlicePrun[0] = 0;\n  done = 1;\n  depth = 0;\n  while (done < 1013760) {\n    for (i = 0; i < 1013760; i++) {\n      if (flipESlicePrun[i] !== depth) {\n        continue;\n      }\n      \n      children1 = flipTable[i / 495 | 0];\n      children2 = eSliceTable[i % 495];\n      for (j = 0; j < 18; j++) {\n        if (flipESlicePrun[children1[j] * 495 + children2[j]] === 15) {\n          flipESlicePrun[children1[j] * 495 + children2[j]] = depth + 1;\n          done++\n        }\n      }\n    }\n    depth++;\n  }\n}\n\nconst initCPESlicePrun = () => {\n  cPESlicePrun = Array(967680);\n  cPESlicePrun.fill(15);\n\n  let children1, children2, done, depth, i, j;\n\n  cPESlicePrun[0] = 0;\n  done = 1;\n  depth = 0;\n  while (done < 967680) {\n    for (i = 0; i < 967680; i++) {\n      if (cPESlicePrun[i] !== depth) {\n        continue;\n      }\n      \n      children1 = cPTable[i / 24 | 0];\n      children2 = eSliceTable2[i % 24];\n      for (j = 0; j < 10; j++) {\n        if (cPESlicePrun[children1[j] * 24 + children2[j]] === 15) {\n          cPESlicePrun[children1[j] * 24 + children2[j]] = depth + 1;\n          done++\n        }\n      }\n    }\n    depth++;\n  }\n}\n\nconst initUDEPESlicePrun = () => {\n  UDEPESlicePrun = Array(967680);\n  UDEPESlicePrun.fill(15);\n\n  let children1, children2, done, depth, i, j;\n\n  UDEPESlicePrun[0] = 0;\n  done = 1;\n  depth = 0;\n  while (done < 967680) {\n    for (i = 0; i < 967680; i++) {\n      if (UDEPESlicePrun[i] !== depth) {\n        continue;\n      }\n      \n      children1 = UDEPTable[i / 24 | 0];\n      children2 = eSliceTable2[i % 24];\n      for (j = 0; j < 10; j++) {\n        if (UDEPESlicePrun[children1[j] * 24 + children2[j]] === 15) {\n          UDEPESlicePrun[children1[j] * 24 + children2[j]] = depth + 1;\n          done++\n        }\n      }\n    }\n    depth++;\n  }\n}\n\nclass ArrayCube {\n  constructor(cp, co, ep, eo) {\n    this.cp = cp ? cp : [0, 1, 2, 3, 4, 5, 6, 7]\n    this.co = co ? co : [0, 0, 0, 0, 0, 0, 0, 0]\n    this.ep = ep ? ep : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    this.eo = eo ? eo : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  }\n\n  apply(move) {\n    return new ArrayCube(\n      this.cp.map((cur, idx) => this.cp[move.cp[idx]]),\n      this.co.map((cur, idx) => (this.co[move.cp[idx]] + move.co[idx]) % 3),\n      this.ep.map((cur, idx) => this.ep[move.ep[idx]]),\n      this.eo.map((cur, idx) => (this.eo[move.ep[idx]] + move.eo[idx]) % 2)\n    )\n  }\n\n  copy() {\n    return new ArrayCube(\n      this.cp,\n      this.co,\n      this.ep,\n      this.eo\n    )\n  }\n\n  toIndexPhase1() {\n    return new IndexCubePhase1(\n      getTwist(this),\n      getFlip(this),\n      getESlice(this),\n      []\n    )\n  }\n\n  toIndexPhase2() {\n    return new IndexCubePhase2(\n      getCP(this),\n      getUDEP(this),\n      getESlice2(this),\n      []\n    )\n  }\n}\n\nclass IndexCubePhase1 {\n  constructor(twist, flip, eslice, move) {\n    this.twist = twist ? twist : 0\n    this.flip = flip ? flip : 0\n    this.eslice = eslice ? eslice : 0\n    this.move = move ? move : []\n  }\n\n  apply(move) {\n    let newTwist, newFlip, newESlice, newMove\n    newTwist = twistTable[this.twist][move]\n    newFlip = flipTable[this.flip][move]\n    newESlice = eSliceTable[this.eslice][move]\n    newMove = this.move.slice()\n    newMove.push(move)\n    return new IndexCubePhase1(\n      newTwist,\n      newFlip,\n      newESlice,\n      newMove\n    )\n  }\n\n  toArray() {\n    return\n  }\n}\n\nclass IndexCubePhase2 {\n  constructor(cp, udep, eslice2, move) {\n    this.cp = cp ? cp : 0\n    this.udep = udep ? udep : 0\n    this.eslice2 = eslice2 ? eslice2 : 0\n    this.move = move ? move : []\n  }\n\n  apply(move) {\n    let _move = restrictedMove.indexOf(move)\n    let newCp, newUDEP, newESlice2, newMove\n    newCp = cPTable[this.cp][_move]\n    newUDEP = UDEPTable[this.udep][_move]\n    newESlice2 = eSliceTable2[this.eslice2][_move]\n    newMove = this.move.slice()\n    newMove.push(move)\n    return new IndexCubePhase2(\n      newCp,\n      newUDEP,\n      newESlice2,\n      newMove\n    )\n  }\n\n  toArray() {\n    return\n  }\n}\n\nconst search = (root, max) => {\n  let stack, _stack, root1, root2, _root\n\n  root1 = root.toIndexPhase1()\n\n  for (let depth = 10; depth <= 13; depth++) {\n    stack = new Stack()\n    stack.push(root1)\n    let cur, nextMove, nextFace, curFace\n    while(stack.size() > 0) {\n      cur = stack.pop();\n      if(cur.move.length === depth && cur.twist === 0 && cur.flip === 0 && cur.eslice === 0) {\n        _root = root.copy()\n        for (let i = 0; i < cur.move.length; i++) {\n          _root = _root.apply(moveObject[cur.move[i]])\n        }\n        root2 = _root.toIndexPhase2()\n\n        for (let _depth = 0; _depth <= max - cur.move.length; _depth++) {\n          _stack = new Stack()\n          _stack.push(root2)\n          let _cur, _nextMove, _nextFace, _curFace\n          while(_stack.size() > 0) {\n            _cur = _stack.pop();\n            if(_cur.cp === 0 && _cur.udep === 0 && _cur.eslice2 === 0) {\n              return cur.move.concat(_cur.move)\n            }\n\n            if (_cur.move.length + Math.max(cPESlicePrun[_cur.cp * 24 + _cur.eslice2], UDEPESlicePrun[_cur.udep * 24 + _cur.eslice2]) > _depth) {\n              continue;\n            }\n\n            for (let i = 0; i < 10; i++) {\n              _nextMove = restrictedMove[i]\n              _nextFace = _nextMove / 3 | 0;\n              _curFace = _cur.move.length === 0 ? -1 : _cur.move[_cur.move.length - 1] / 3 | 0;\n              if (_nextFace % 3 !== _curFace % 3 || _nextFace > _curFace) {\n                _stack.push(_cur.apply(_nextMove));\n              }\n            }\n          }\n        }\n      }\n  \n      if (cur.move.length + Math.max(twistESlicePrun[cur.twist * 495 + cur.eslice], flipESlicePrun[cur.flip * 495 + cur.eslice]) > depth) {\n        continue;\n      }\n  \n      for (nextMove = 0; nextMove < 18; nextMove++) {\n        nextFace = nextMove / 3 | 0;\n        curFace = cur.move.length === 0 ? -1 : cur.move[cur.move.length - 1] / 3 | 0;\n        if (nextFace % 3 !== curFace % 3 || nextFace > curFace) {\n          stack.push(cur.apply(nextMove));\n        }\n      }\n    }\n  }\n\n  return null\n}\n\nconst getRandomState = (seed) => {\n  let cp, co, ep, eo;\n  let random = new Random(seed);\n  let obj = new ArrayCube();\n  do {\n    cp = random.randomInt(40320);\n    ep = random.randomInt(479001600);\n  } while (getCornerParity(cp) !== getEdgeParity(ep))\n  co = random.randomInt(2187);\n  eo = random.randomInt(2048);\n\n  setCP(obj, cp);\n  setTwist(obj, co);\n  setEP(obj, ep);\n  setFlip(obj, eo)\n  \n  return obj;\n}\n\nconst cancelMoves = (moves) => {\n  let l, faceList, axisList, suffixList, newFaceList, newAxisList, newSuffixList, cancelled, ret;\n  l = moves.length;\n  faceList = Array(l);\n  axisList = Array(l);\n  suffixList = Array(l);\n  for (let i = 0; i < l; i++) {\n    faceList[i] = moves[i] / 3 | 0;\n    axisList[i] = faceList[i] % 3;\n    suffixList[i] = moves[i] % 3\n  }\n  \n  do {\n    cancelled = 0;\n    l = faceList.length;\n\n    for (let i = 0; i < l - 1; i++) {\n      if (axisList[i] === axisList[i + 1] && faceList[i] > faceList[i + 1]) {\n        swapElement(faceList, i);\n        swapElement(axisList, i);\n        swapElement(suffixList, i);\n      }\n    }\n\n    for (let i = 0; i < l - 1; i++) {\n      if (faceList[i] === faceList[i + 1]) {\n        cancelled++;\n        suffixList[i] = (suffixList[i] + suffixList[i + 1] + 1) % 4;\n        suffixList[i + 1] = 3;\n      }\n    }\n\n    newFaceList = [];\n    newAxisList = [];\n    newSuffixList = [];\n\n    for (let i = 0; i < l; i++) {\n      if (suffixList[i] !== 3) {\n        newFaceList.push(faceList[i]);\n        newAxisList.push(axisList[i]);\n        newSuffixList.push(suffixList[i]);\n      }\n    }\n\n    faceList = newFaceList.slice();\n    axisList = newAxisList.slice();\n    suffixList = newSuffixList.slice();\n  } while (cancelled > 0)\n\n  ret = Array(faceList.length);\n  for (let i = 0; i < faceList.length; i++) {\n    ret[i] = faceList[i] * 3 + suffixList[i];\n  }\n  return ret;\n}\n\nconst swapElement = (arr, idx) => {\n  arr.splice(idx, 2, arr[idx + 1], arr[idx]);\n}\n\nconst initUtil = () => {\n  Cnk = create2DArray(12, 12);\n  for (let i = 0; i < 12; i++) {\n    Cnk[i].fill(0);\n    Cnk[i][0] = 1;\n    Cnk[i][i] = 1;\n    for (let j = 1; j < i; j++) {\n      Cnk[i][j] = Cnk[i - 1][j - 1] + Cnk[i - 1][j];\n    }\n  }\n\n  moveName = [\"U\", \"U2\", \"U'\", \"F\", \"F2\", \"F'\", \"R\", \"R2\", \"R'\", \"D\", \"D2\", \"D'\", \"B\", \"B2\", \"B'\", \"L\", \"L2\", \"L'\"];\n\n  moveObject = Array(18);\n  moveObject[U * 3] = new ArrayCube(\n    [3, 0, 1, 2, 4, 5, 6, 7],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [4, 5, 2, 3, 1, 0, 6, 7, 8, 9, 10, 11],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  )\n  moveObject[F * 3] = new ArrayCube(\n    [1, 7, 2, 3, 0, 5, 6, 4],\n    [1, 2, 0, 0, 2, 0, 0, 1],\n    [9, 1, 2, 8, 4, 5, 6, 7, 0, 3, 10, 11],\n    [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0]\n  );\n  moveObject[R * 3] = new ArrayCube(\n    [4, 1, 2, 0, 5, 3, 6, 7],\n    [2, 0, 0, 1, 1, 2, 0, 0],\n    [0, 1, 2, 3, 8, 5, 6, 11, 7, 9, 10, 4],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  );\n  moveObject[D * 3] = new ArrayCube(\n    [0, 1, 2, 3, 7, 4, 5, 6],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 1, 7, 6, 4, 5, 2, 3, 8, 9, 10, 11],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  );\n  moveObject[B * 3] = new ArrayCube(\n    [0, 1, 3, 5, 4, 6, 2, 7],\n    [0, 0, 1, 2, 0, 1, 2, 0],\n    [0, 11, 10, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n    [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1]\n  );\n  moveObject[L * 3] = new ArrayCube(\n    [0, 2, 6, 3, 4, 5, 7, 1],\n    [0, 1, 2, 0, 0, 0, 1, 2],\n    [0, 1, 2, 3, 4, 10, 9, 7, 8, 5, 6, 11],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  );\n  for (let i = 0; i < 6; i++) {\n    moveObject[i * 3 + 1] = moveObject[i * 3].apply(moveObject[i * 3])\n    moveObject[i * 3 + 2] = moveObject[i * 3 + 1].apply(moveObject[i * 3])\n  }\n\n  restrictedMove = [0, 1, 2, 4, 7, 9, 10, 11, 13, 16];\n}\n\nconst bitCount = (bits) =>{\n  bits = (bits & 0x55555555) + (bits >> 1 & 0x55555555);\n  bits = (bits & 0x33333333) + (bits >> 2 & 0x33333333);\n  bits = (bits & 0x0f0f0f0f) + (bits >> 4 & 0x0f0f0f0f);\n  bits = (bits & 0x00ff00ff) + (bits >> 8 & 0x00ff00ff);\n  return (bits & 0x0000ffff) + (bits >>16 & 0x0000ffff);\n}\n\nconst fact = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\n\nconst create2DArray = (l1, l2) => {\n  let ret = Array(l1);\n  for (let i = 0; i < l1; i++){\n    ret[i] = Array(l2);\n  }\n  return ret;\n}\n\nclass Random {\n  constructor(seed) {\n    this.x = 123456789;\n    this.y = 362436069;\n    this.z = 521288629;\n    this.w = seed ? seed : Math.floor(Math.random() * Date.now());\n  }\n  \n  _random() {\n    let t;\n \n    t = this.x ^ (this.x << 11);\n    this.x = this.y; this.y = this.z; this.z = this.w;\n    return this.w = (this.w ^ (this.w >>> 19)) ^ (t ^ (t >>> 8)); \n  }\n  \n  randomInt(n) {\n    const r = Math.abs(this._random());\n    return (r % n);\n  }\n}\n\nclass Stack {\n  constructor() {\n    this.heap = [];\n  }\n\n  empty() {\n    if (this.heap.length === 0) return true;\n    return false;\n  }\n\n  size() {\n    return this.heap.length;\n  }\n\n  top() {\n    return this.heap[0];\n  }\n \n  push(item) {\n    this.heap.unshift(item);\n  }\n  \n  pop() {\n    return this.heap.shift();\n  }\n}\n\nconst initialize = () => {\n  if (!initialized) {\n    initUtil();\n    initTable();\n    initPrun();\n    initialized = true;\n  }\n}\n\nconst solve = (scramble, max = 22) => {\n  // console.log('scramble: ' + scramble);\n  let arr = scramble.split(' ');\n  let obj = new ArrayCube()\n  let _solution;\n  let solution = '';\n\n  for (let i = 0; i < arr.length; i++) {\n    if (moveName.indexOf(arr[i]) >= 0) obj = obj.apply(moveObject[moveName.indexOf(arr[i])])\n  }\n\n  _solution = search(obj, max);\n  if (_solution == null) {\n    return 'Error';\n  }\n  _solution = cancelMoves(_solution);\n  _solution.forEach((val) => {\n    solution += moveName[val] + ' '\n  })\n  // console.log('solution: ' + solution);\n  // console.log(_solution.length + ' moves');\n  return solution;\n}\n\nconst getScramble = (seed, max = 22) => {\n  let scr, solution, ret;\n\n  scr = getRandomState(seed);\n  solution = search(scr, max);\n  if (solution == null) {\n    return 'Error';\n  }\n  solution = cancelMoves(solution);\n  solution.reverse();\n  ret = '';\n  solution.forEach((val) => {\n    ret += moveName[val] + ' '\n  })\n  console.log(ret + '[' + solution.length + ' moves]')\n  return ret;\n}\n\nreturn {\n  initialize: initialize,\n  solve: solve,\n  getScramble: getScramble,\n}\n\n})();\n\nexport default twophase","import React, {useEffect, useState} from \"react\";\nimport {AppBar, Box, Button, TextField, Toolbar, Typography} from \"@material-ui/core\";\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\"\nimport twoPhase from './lib/twophase'\nimport {RouteComponentProps} from \"react-router-dom\";\nimport {RouterState} from \"./types/routerState\";\n\nconst Home = (props: RouteComponentProps) => {\n    const useStyles = makeStyles(() => createStyles({\n        container: {\n            margin: '0 auto',\n            padding: '20px',\n            maxWidth: '700px'\n        },\n        box: {\n            marginBottom: '10px'\n        },\n        error: {\n            color: \"red\"\n        }\n    }))\n    const classes = useStyles()\n\n    const [algList, setAlgList] = useState(Array<string>())\n    const [isError, setIsError] = useState(false)\n\n    useEffect(() => {\n        twoPhase.initialize()\n        if (props.location.state) {\n            setAlgList((props.location.state as RouterState).algList)\n        }\n    }, [props.location.state])\n\n    const handleAlgListChanged = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setAlgList(event.target.value.split(\"\\n\"))\n    }\n\n    const onClickTrainerButton = () => {\n        if (algList.length === 0) {\n            setIsError(true)\n            setTimeout(() => {\n                setIsError(false)\n            }, 3000)\n            return\n        }\n        props.history.push({\n            pathname: \"trainer\",\n            state: {\n                algList: algList\n            }\n        })\n    }\n\n    return (\n        <div>\n            <AppBar position={\"relative\"}>\n                <Toolbar>\n                    <Typography>Alg Trainer</Typography>\n                </Toolbar>\n            </AppBar>\n            <Box className={classes.container} maxWidth={\"xs\"} display={\"flex\"} flexDirection={\"column\"}>\n                <Typography className={classes.box}>\n                    複数の手順を練習できるツールです。<br/><br/>\n                    練習したい手順を入力してください。<br/>\n                    1行1手順となり、改行すると別手順とみなされます。<br/>\n                    プライム記号は必ずシングルクォーテーションを使い、記号間には必ず半角スペースを置いてください。\n                </Typography>\n                <Box className={classes.box} display={\"flex\"} justifyContent={\"center\"}>\n                    <Button variant=\"contained\" size=\"large\" onClick={onClickTrainerButton}>\n                        練習する\n                    </Button>\n                </Box>\n                {isError &&\n                <Box className={classes.box} display={\"flex\"} justifyContent={\"center\"}>\n                    <Typography className={classes.error}>\n                        手順が入力されていません\n                    </Typography>\n                </Box>\n                }\n                <TextField className={classes.box}\n                           id=\"textField\"\n                           multiline\n                           rows={10}\n                           variant=\"outlined\"\n                           defaultValue={algList.join(\"\\n\")}\n                           onChange={handleAlgListChanged}/>\n            </Box>\n        </div>\n    )\n}\n\nexport default Home\n","import React, {useEffect, useRef, useState} from \"react\";\nimport {AppBar, Box, Button, makeStyles, Toolbar, Typography} from \"@material-ui/core\";\nimport moment from \"moment\";\nimport twoPhase from './lib/twophase'\nimport algUtil from './lib/algUtil'\nimport {RouteComponentProps} from \"react-router-dom\";\nimport {RouterState} from \"./types/routerState\";\n\nconst Trainer = (props: RouteComponentProps) => {\n    const useStyles = makeStyles(() => ({\n        container: {\n            margin: '0 auto',\n            padding: '20px',\n            maxWidth: '700px'\n        },\n        box: {\n            marginBottom: '10px'\n        },\n        scrambleBlock: {\n            backgroundColor: '#dddddd'\n        },\n        imageBlock: {\n            backgroundColor: '#eeeeee'\n        },\n        timerBlock: {\n            backgroundColor: '#ededed'\n        },\n        timeListBlock: {\n            backgroundColor: '#dddddd'\n        }\n    }))\n    const classes = useStyles()\n\n    const intervalRef = useRef<NodeJS.Timeout | null>(null);\n    const [time, setTime] = useState(0); // センチ秒\n    const [algList, setAlgList] = useState(Array<string>())\n    const [isTimerRunning, setIsTimerRunning] = useState(false)\n    const [timeList, setTimeList] = useState(Array<string>())\n    const [scramble, setScramble] = useState(\"\")\n\n    useEffect(() => {\n        twoPhase.initialize()\n        if (props.location.state) {\n            const algListInState = props.location.state as RouterState\n            setAlgList(algListInState.algList)\n            startGame(algListInState.algList)\n        } else {\n            props.history.push(\"/\")\n        }\n    }, [props.history, props.location.state])\n\n    document.onkeydown = (event) => {\n        if (event.code === \"Space\") {\n            operateGame()\n        }\n    }\n\n    const onTouchTimerView = () => {\n        operateGame()\n    }\n\n    const operateGame = () => {\n        if (isTimerRunning) { // ソルブ中\n            endGame()\n            setIsTimerRunning(false)\n        } else { // 停止中\n            setTime(0)\n            startTimer()\n            setIsTimerRunning(true)\n        }\n    }\n\n    const startGame = (list: Array<string>) => {\n        const algIndex = Math.floor(Math.random() * list.length)\n        setScramble(twoPhase.solve(algUtil.makeRotationLessAlg(list[algIndex])))\n    }\n\n    const endGame = () => {\n        stopTimer()\n        if (time / 100 / 60 < 1) {\n            setTimeList([\n                ...timeList,\n                moment(time * 10).format('s.SS')\n            ])\n        } else {\n            setTimeList([\n                ...timeList,\n                moment(time * 10).format('m:ss.SS')\n            ])\n        }\n        startGame(algList)\n    }\n\n    const startTimer = () => {\n        if (intervalRef.current !== null) return;\n        intervalRef.current = setInterval(() => {\n            setTime(c => c + 1);\n        }, 10);\n    }\n\n    const stopTimer = () => {\n        if (intervalRef.current === null) return;\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n    }\n\n    return (\n        <div>\n            <AppBar position={\"relative\"}>\n                <Toolbar>\n                    <Typography>Alg Trainer</Typography>\n                </Toolbar>\n            </AppBar>\n            <Box className={classes.container} maxWidth={\"xs\"} display={\"flex\"} flexDirection={\"column\"}>\n                <Box className={classes.box} display={\"flex\"} justifyContent={\"space-between\"}>\n                    <Button variant='contained' onClick={() => props.history.push({\n                        pathname: \"/\",\n                        state: {\n                            algList: algList\n                        }\n                    })}>\n                        戻る\n                    </Button>\n                </Box>\n                <Typography className={classes.box}>\n                    スタート/ストップ方法<br/>\n                    PC: スペースキー押下<br/>\n                    スマホ: タイマー部分タップ\n                </Typography>\n                <Box className={classes.scrambleBlock} display={\"flex\"} justifyContent={\"center\"}>\n                    <Typography>\n                        Scramble: {scramble}\n                    </Typography>\n                </Box>\n                <Box display={\"flex\"}>\n                    <Box className={classes.imageBlock} display={\"flex\"}>\n                        <img\n                            src={\"https://cubing.net/api/visualcube/?fmt=svg&r=x-30y30z15&bg=t&size=150&pzl=3&alg=\" + scramble.replace(/\\s+/g, \"\")}\n                            alt={\"\"}\n                        />\n                    </Box>\n                    <Box className={classes.timerBlock}\n                         display={\"flex\"}\n                         justifyContent={\"center\"}\n                         alignItems={\"center\"}\n                         flexGrow={1}\n                         onTouchStart={onTouchTimerView}>\n                        <Typography variant={\"h4\"}>\n                            {moment(time * 10).format('mm:ss.SS')}\n                        </Typography>\n                    </Box>\n                </Box>\n                <Box className={classes.timeListBlock} display={\"flex\"}>\n                    <Typography>\n                        Time List:\n                    </Typography>\n                </Box>\n                <Box className={classes.timeListBlock} display={\"flex\"}>\n                    <Typography>\n                        &nbsp; {timeList.join(\", \")}\n                    </Typography>\n                </Box>\n            </Box>\n        </div>\n    )\n}\n\nexport default Trainer\n","import React from \"react\";\nimport {HashRouter as Router, Route} from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Trainer from \"./Trainer\";\n\nfunction App() {\n    return (\n        <Router>\n            <div>\n                <Route exact path='/' component={Home}/>\n                <Route path='/trainer' component={Trainer}/>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}